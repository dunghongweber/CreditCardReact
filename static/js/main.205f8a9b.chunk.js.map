{"version":3,"sources":["components/NavBar.js","components/Cards.js","components/Home.js","components/AddCard.js","components/CardDetails.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","id","Cards","cardsList","cardList","deleteCard","map","c","key","_id","src","picture","alt","name","benefit","to","Home","state","cards","addCard","newKey","forEach","e","console","log","cardsC","setState","filter","axios","get","then","res","data","this","Component","AddCard","issuer","handleChange","target","value","handleSubmit","preventDefault","method","url","qs","stringify","toUpperCase","headers","onSubmit","htmlFor","type","required","onChange","CardDetails","card","handleDelete","deleteID","delete","props","match","params","card_id","onClick","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.205f8a9b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"navbar-fixed\">\r\n      <nav>\r\n        <div className=\"nav-wrapper indigo darken-1\">\r\n          <a href=\"/\" className=\"brand-logo center\">\r\n            Cards Management\r\n          </a>\r\n          <ul id=\"nav-mobile\" className=\"right\">\r\n            <li>\r\n              <a href=\"/add\">Add Card</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Cards = ({ cardsList, deleteCard }) => {\r\n  const cardList = cardsList.map((c) => {\r\n    return (\r\n      <div className=\"myCard row\" key={c._id}>\r\n        <div className=\"col m4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-image waves-effect waves-block waves-light\">\r\n              <img src={c.picture} alt=\"card-pic\" className=\"activator\" />\r\n            </div>\r\n\r\n            {/* <div className=\"card-content\"> */}\r\n            {/* <p>{c.name}</p> */}\r\n\r\n            {/* <a href=\"#!\" className=\"activator blue-text\">\r\n                {c.issuer.toUpperCase()}\r\n              </a> */}\r\n\r\n            {/* <div className=\"card-action\">\r\n                <a href=\"#!\" className=\"activator blue-text\">\r\n                  {c.issuer.toUpperCase()}\r\n                </a>\r\n              </div> */}\r\n            {/* </div> */}\r\n\r\n            {/* Reveal card detail */}\r\n            <div className=\"card-reveal\">\r\n              <span className=\"card-title blue-text text-lighten-2\">\r\n                {c.name}\r\n                <i className=\"material-icons right\">close</i>\r\n              </span>\r\n              <p>{c.benefit}</p>\r\n              <Link\r\n                to={\"/\" + c._id}\r\n                className=\"waves-effect waves-light btn blue\"\r\n              >\r\n                <i className=\"material-icons right\">credit_card</i>\r\n                Detail\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  if (cardList) {\r\n    return <div className=\"cardList\">{cardList}</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"center\">\r\n        <p>Loading....</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport Cards from \"./Cards\";\r\nimport axios from \"axios\";\r\n\r\nclass Home extends Component {\r\n  //store data of all cards from API\r\n  state = {\r\n    cards: [],\r\n  };\r\n  componentDidMount() {\r\n    axios.get(\"https://dh-react-card.herokuapp.com/all-cards\").then((res) => {\r\n      console.log(res);\r\n\r\n      this.setState({\r\n        cards: res.data,\r\n      });\r\n    });\r\n  }\r\n\r\n  addCard = (c) => {\r\n    //find latest key\r\n    let newKey = 1;\r\n    this.state.cards.forEach((e) => {\r\n      if (e.id >= newKey) {\r\n        console.log(e.id);\r\n        newKey = e.id + 1;\r\n      }\r\n    });\r\n    //assign new key\r\n    c.id = newKey;\r\n\r\n    let cardsC = [...this.state.cards, c];\r\n    this.setState({\r\n      cards: cardsC,\r\n    });\r\n  };\r\n  deleteCard = (id) => {\r\n    let cardsC = this.state.cards.filter((c) => c.id !== id);\r\n    this.setState({\r\n      cards: cardsC,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Home container row\">\r\n        <Cards\r\n          cardsList={this.state.cards}\r\n          deleteCard={this.deleteCard}\r\n        ></Cards>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport qs from \"qs\";\r\n\r\nclass AddCard extends Component {\r\n  state = {\r\n    id: null,\r\n    name: null,\r\n    benefit: null,\r\n    picture: null,\r\n    issuer: null,\r\n    // category: null,\r\n    // type: null,\r\n    // openOn: null,\r\n    // stopUsageOn: null,\r\n    // closingStatementDate: null,\r\n    // redeemMin: null,\r\n    // waive: null,\r\n    // benefits: [],\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // console.log(this.state); //testing\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"https://dh-react-card.herokuapp.com/new\",\r\n      data: qs.stringify({\r\n        benefit: this.state.benefit.toUpperCase(),\r\n        issuer: this.state.issuer.toUpperCase(),\r\n        name: this.state.name.toUpperCase(),\r\n        picture: this.state.picture,\r\n      }),\r\n      headers: {\r\n        \"content-type\": \"application/x-www-form-urlencoded;charset=utf-8\",\r\n      },\r\n    });\r\n\r\n    // e.target.reset();\r\n    // alert(\"Card Added\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"AddCard container\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"picture\">Card Picture URL:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"picture\"\r\n            className=\"validate\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"name\">Card Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            className=\"validate\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"issuer\">Card Issuer:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"issuer\"\r\n            className=\"validate\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"benefit\">Card Benefit:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"benefit\"\r\n            className=\"validate\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <button\r\n            className=\"btn waves-effect waves-light blue\"\r\n            type=\"submit\"\r\n            name=\"action\"\r\n          >\r\n            Add Card\r\n            <i className=\"material-icons right\">add</i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCard;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass CardDetails extends Component {\r\n  state = {\r\n    id: null,\r\n    card: null,\r\n  };\r\n  componentDidMount() {\r\n    let id = this.props.match.params.card_id;\r\n\r\n    console.log(id);\r\n\r\n    axios\r\n      .get(\"https://dh-react-card.herokuapp.com/detail/\" + id)\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ card: res.data, id: id });\r\n      });\r\n\r\n    this.setState({\r\n      //   id: id,\r\n    });\r\n  }\r\n  handleDelete = () => {\r\n    let deleteID = this.state.card._id;\r\n    // console.log(typeof deleteID); //testing\r\n\r\n    axios.delete(\"https://dh-react-card.herokuapp.com/delete/\" + deleteID);\r\n  };\r\n  render() {\r\n    const card = this.state.card ? (\r\n      <div className=\"carddetails container\">\r\n        <h5 className=\"center\">{this.state.card.name}</h5>\r\n        <div className=\"center\">by: {this.state.card.issuer}</div>\r\n        <p>\r\n          <strong>BENEFITS:</strong> <br /> {this.state.card.benefit}\r\n        </p>\r\n        <a\r\n          href=\"#!\"\r\n          className=\"waves-effect waves-light btn red\"\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i className=\"material-icons left\">delete</i>\r\n          Delete\r\n        </a>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Error, cannot fetch card data</div>\r\n    );\r\n    //after checking then return fetched data\r\n    return <div className=\"container\">{card}</div>;\r\n  }\r\n}\r\n\r\nexport default CardDetails;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Home from \"./components/Home\";\nimport AddCard from \"./components/AddCard\";\nimport CardDetails from \"./components/CardDetails\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <NavBar></NavBar>\n          <Switch>\n            <Route exact path=\"/\" component={Home}></Route>\n            <Route path=\"/add\" component={AddCard}></Route>\n            <Route path=\"/:card_id\" component={CardDetails}></Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}